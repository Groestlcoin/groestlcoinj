plugins {
    id 'java-library'
    id 'com.google.protobuf'
    id 'maven-publish'
    id 'eclipse'
    id 'signing'
}

version = '0.16.1'

dependencies {
    api 'org.bouncycastle:bcprov-jdk15to18:1.69'
    api 'com.google.guava:guava:31.0.1-android'
    api 'com.google.protobuf:protobuf-javalite:3.18.0'
    api 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'net.jcip:jcip-annotations:1.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.easymock:easymock:3.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.5.2'
    testImplementation 'org.slf4j:slf4j-jdk14:1.7.32'
    testImplementation 'com.h2database:h2:1.3.167'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:2.5.2'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

sourceCompatibility = 1.7
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
    generatedFilesBaseDir = new File(projectDir, '/src') // workaround for '$projectDir/src'
}

test {
    exclude 'org/bitcoinj/core/PeerTest*'
    exclude 'org/bitcoinj/core/TransactionBroadcastTest*'
    exclude 'org/bitcoinj/net/discovery/DnsDiscoveryTest*'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

ext.moduleName = 'org.bitcoinj.core'

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Automatic-Module-Name': moduleName
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishToMavenLocal.dependsOn('pom')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenJavaPublication'
    from "${buildDir}/publications/mavenJava/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', 'groestlcoinj-core-' + version + '.pom'
    doLast {
        ant.checksum algorithm: 'md5', file: "${buildDir}/libs/groestlcoinj-core-${version}.pom"
        ant.checksum algorithm: 'sha1', file: "${buildDir}/libs/groestlcoinj-core-${version}.pom"
    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", "../contrib/groestld/build"
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Jar) { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath
        ant.checksum algorithm: 'sha1', file: it.archivePath
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'groestlcoinj-core'
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "groestlcoinj-core"
                description = 'A Java Groestlcoin library'
                url = 'https://github.com/Groestlcoin/groestlcoinj'
                scm {
                    connection = 'scm:svn:https://github.com/Groestlcoin/groestlcoinj'
                    developerConnection = 'scm:svn:https://github.com/Groestlcoin/groestlcoinj'
                    url = 'https://github.com/Groestlcoin/groestlcoinj'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hashengineering'
                        name = 'HashEngineering'
                        email = 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsernameGroestlcoinj')?project.findProperty('ossrhUsernameGroestlcoinj'):''
                password = project.hasProperty('ossrhPasswordGroestlcoinj')?project.findProperty('ossrhPasswordGroestlcoinj'):''
                println(username + " /// " + password)
            }
        }
    }
}


tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
